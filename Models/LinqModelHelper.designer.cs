#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestHireChannelMVC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database2")]
	public partial class LinqModelHelperDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJobSkill(JobSkill instance);
    partial void UpdateJobSkill(JobSkill instance);
    partial void DeleteJobSkill(JobSkill instance);
    partial void InsertUserSkill(UserSkill instance);
    partial void UpdateUserSkill(UserSkill instance);
    partial void DeleteUserSkill(UserSkill instance);
    partial void InsertRecruiterPinnedUser(RecruiterPinnedUser instance);
    partial void UpdateRecruiterPinnedUser(RecruiterPinnedUser instance);
    partial void DeleteRecruiterPinnedUser(RecruiterPinnedUser instance);
    partial void InsertRecruiterBoard(RecruiterBoard instance);
    partial void UpdateRecruiterBoard(RecruiterBoard instance);
    partial void DeleteRecruiterBoard(RecruiterBoard instance);
    partial void InsertUserAppliedJob(UserAppliedJob instance);
    partial void UpdateUserAppliedJob(UserAppliedJob instance);
    partial void DeleteUserAppliedJob(UserAppliedJob instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertBoardContent(BoardContent instance);
    partial void UpdateBoardContent(BoardContent instance);
    partial void DeleteBoardContent(BoardContent instance);
    partial void InsertJobBoardRow(JobBoardRow instance);
    partial void UpdateJobBoardRow(JobBoardRow instance);
    partial void DeleteJobBoardRow(JobBoardRow instance);
    partial void InsertBoardColumn(BoardColumn instance);
    partial void UpdateBoardColumn(BoardColumn instance);
    partial void DeleteBoardColumn(BoardColumn instance);
    #endregion
		
		public LinqModelHelperDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqModelHelperDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqModelHelperDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqModelHelperDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqModelHelperDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserPinnedJob> UserPinnedJobs
		{
			get
			{
				return this.GetTable<UserPinnedJob>();
			}
		}
		
		public System.Data.Linq.Table<FollowRecruiter> FollowRecruiters
		{
			get
			{
				return this.GetTable<FollowRecruiter>();
			}
		}
		
		public System.Data.Linq.Table<JobSkill> JobSkills
		{
			get
			{
				return this.GetTable<JobSkill>();
			}
		}
		
		public System.Data.Linq.Table<UserSkill> UserSkills
		{
			get
			{
				return this.GetTable<UserSkill>();
			}
		}
		
		public System.Data.Linq.Table<RecruiterPinnedUser> RecruiterPinnedUsers
		{
			get
			{
				return this.GetTable<RecruiterPinnedUser>();
			}
		}
		
		public System.Data.Linq.Table<RecruiterBoard> RecruiterBoards
		{
			get
			{
				return this.GetTable<RecruiterBoard>();
			}
		}
		
		public System.Data.Linq.Table<UserAppliedJob> UserAppliedJobs
		{
			get
			{
				return this.GetTable<UserAppliedJob>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<BoardContent> BoardContents
		{
			get
			{
				return this.GetTable<BoardContent>();
			}
		}
		
		public System.Data.Linq.Table<JobBoardRow> JobBoardRows
		{
			get
			{
				return this.GetTable<JobBoardRow>();
			}
		}
		
		public System.Data.Linq.Table<BoardColumn> BoardColumns
		{
			get
			{
				return this.GetTable<BoardColumn>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPinnedJobs")]
	public partial class UserPinnedJob
	{
		
		private System.Guid _UserID;
		
		private System.Guid _JobID;
		
		public UserPinnedJob()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this._JobID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FollowRecruiters")]
	public partial class FollowRecruiter
	{
		
		private System.Guid _UserID;
		
		private System.Guid _RecruiterID;
		
		public FollowRecruiter()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecruiterID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RecruiterID
		{
			get
			{
				return this._RecruiterID;
			}
			set
			{
				if ((this._RecruiterID != value))
				{
					this._RecruiterID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobSkills")]
	public partial class JobSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobID;
		
		private string _Skill;
		
		private short _Year;
		
		private System.Guid _JobSkillID;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnSkillChanging(string value);
    partial void OnSkillChanged();
    partial void OnYearChanging(short value);
    partial void OnYearChanged();
    partial void OnJobSkillIDChanging(System.Guid value);
    partial void OnJobSkillIDChanged();
    #endregion
		
		public JobSkill()
		{
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skill", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Skill
		{
			get
			{
				return this._Skill;
			}
			set
			{
				if ((this._Skill != value))
				{
					this.OnSkillChanging(value);
					this.SendPropertyChanging();
					this._Skill = value;
					this.SendPropertyChanged("Skill");
					this.OnSkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="SmallInt NOT NULL")]
		public short Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobSkillID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobSkillID
		{
			get
			{
				return this._JobSkillID;
			}
			set
			{
				if ((this._JobSkillID != value))
				{
					this.OnJobSkillIDChanging(value);
					this.SendPropertyChanging();
					this._JobSkillID = value;
					this.SendPropertyChanged("JobSkillID");
					this.OnJobSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobSkill", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobSkills.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobSkills.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSkills")]
	public partial class UserSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _Skill;
		
		private int _Year;
		
		private System.Guid _UserSkillID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnSkillChanging(string value);
    partial void OnSkillChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnUserSkillIDChanging(System.Guid value);
    partial void OnUserSkillIDChanged();
    #endregion
		
		public UserSkill()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skill", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Skill
		{
			get
			{
				return this._Skill;
			}
			set
			{
				if ((this._Skill != value))
				{
					this.OnSkillChanging(value);
					this.SendPropertyChanging();
					this._Skill = value;
					this.SendPropertyChanged("Skill");
					this.OnSkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSkillID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserSkillID
		{
			get
			{
				return this._UserSkillID;
			}
			set
			{
				if ((this._UserSkillID != value))
				{
					this.OnUserSkillIDChanging(value);
					this.SendPropertyChanging();
					this._UserSkillID = value;
					this.SendPropertyChanged("UserSkillID");
					this.OnUserSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSkill", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSkills.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSkills.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecruiterPinnedUsers")]
	public partial class RecruiterPinnedUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RecruiterID;
		
		private System.Guid _UserID;
		
		private System.DateTime _PinnedTime;
		
		private System.Nullable<System.DateTime> _LastScanTime;
		
		private System.Guid _PinID;
		
		private System.Guid _JobID;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecruiterIDChanging(System.Guid value);
    partial void OnRecruiterIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnPinnedTimeChanging(System.DateTime value);
    partial void OnPinnedTimeChanged();
    partial void OnLastScanTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastScanTimeChanged();
    partial void OnPinIDChanging(System.Guid value);
    partial void OnPinIDChanged();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    #endregion
		
		public RecruiterPinnedUser()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecruiterID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RecruiterID
		{
			get
			{
				return this._RecruiterID;
			}
			set
			{
				if ((this._RecruiterID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecruiterIDChanging(value);
					this.SendPropertyChanging();
					this._RecruiterID = value;
					this.SendPropertyChanged("RecruiterID");
					this.OnRecruiterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PinnedTime", DbType="DateTime NOT NULL")]
		public System.DateTime PinnedTime
		{
			get
			{
				return this._PinnedTime;
			}
			set
			{
				if ((this._PinnedTime != value))
				{
					this.OnPinnedTimeChanging(value);
					this.SendPropertyChanging();
					this._PinnedTime = value;
					this.SendPropertyChanged("PinnedTime");
					this.OnPinnedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastScanTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastScanTime
		{
			get
			{
				return this._LastScanTime;
			}
			set
			{
				if ((this._LastScanTime != value))
				{
					this.OnLastScanTimeChanging(value);
					this.SendPropertyChanging();
					this._LastScanTime = value;
					this.SendPropertyChanged("LastScanTime");
					this.OnLastScanTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PinID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PinID
		{
			get
			{
				return this._PinID;
			}
			set
			{
				if ((this._PinID != value))
				{
					this.OnPinIDChanging(value);
					this.SendPropertyChanging();
					this._PinID = value;
					this.SendPropertyChanged("PinID");
					this.OnPinIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecruiterPinnedUser", Storage="_User", ThisKey="RecruiterID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecruiterPinnedUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecruiterPinnedUsers.Add(this);
						this._RecruiterID = value.UserID;
					}
					else
					{
						this._RecruiterID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecruiterPinnedUser1", Storage="_User1", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.RecruiterPinnedUsers1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.RecruiterPinnedUsers1.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_RecruiterPinnedUser", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.RecruiterPinnedUsers.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.RecruiterPinnedUsers.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecruiterBoards")]
	public partial class RecruiterBoard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BoardID;
		
		private System.Guid _OwnerID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _CreateTime;
		
		private EntitySet<JobBoardRow> _JobBoardRows;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBoardIDChanging(System.Guid value);
    partial void OnBoardIDChanged();
    partial void OnOwnerIDChanging(System.Guid value);
    partial void OnOwnerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public RecruiterBoard()
		{
			this._JobBoardRows = new EntitySet<JobBoardRow>(new Action<JobBoardRow>(this.attach_JobBoardRows), new Action<JobBoardRow>(this.detach_JobBoardRows));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BoardID
		{
			get
			{
				return this._BoardID;
			}
			set
			{
				if ((this._BoardID != value))
				{
					this.OnBoardIDChanging(value);
					this.SendPropertyChanging();
					this._BoardID = value;
					this.SendPropertyChanged("BoardID");
					this.OnBoardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecruiterBoard_JobBoardRow", Storage="_JobBoardRows", ThisKey="BoardID", OtherKey="BoardID")]
		public EntitySet<JobBoardRow> JobBoardRows
		{
			get
			{
				return this._JobBoardRows;
			}
			set
			{
				this._JobBoardRows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecruiterBoard", Storage="_User", ThisKey="OwnerID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecruiterBoards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecruiterBoards.Add(this);
						this._OwnerID = value.UserID;
					}
					else
					{
						this._OwnerID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobBoardRows(JobBoardRow entity)
		{
			this.SendPropertyChanging();
			entity.RecruiterBoard = this;
		}
		
		private void detach_JobBoardRows(JobBoardRow entity)
		{
			this.SendPropertyChanging();
			entity.RecruiterBoard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAppliedJobs")]
	public partial class UserAppliedJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private System.Guid _JobID;
		
		private System.Guid _ID;
		
		private System.Nullable<System.DateTime> _RetrieveTime;
		
		private System.DateTime _AppliedTime;
		
		private System.Nullable<System.Guid> _Stage;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRetrieveTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnRetrieveTimeChanged();
    partial void OnAppliedTimeChanging(System.DateTime value);
    partial void OnAppliedTimeChanged();
    partial void OnStageChanging(System.Nullable<System.Guid> value);
    partial void OnStageChanged();
    #endregion
		
		public UserAppliedJob()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetrieveTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> RetrieveTime
		{
			get
			{
				return this._RetrieveTime;
			}
			set
			{
				if ((this._RetrieveTime != value))
				{
					this.OnRetrieveTimeChanging(value);
					this.SendPropertyChanging();
					this._RetrieveTime = value;
					this.SendPropertyChanged("RetrieveTime");
					this.OnRetrieveTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppliedTime", DbType="DateTime NOT NULL")]
		public System.DateTime AppliedTime
		{
			get
			{
				return this._AppliedTime;
			}
			set
			{
				if ((this._AppliedTime != value))
				{
					this.OnAppliedTimeChanging(value);
					this.SendPropertyChanging();
					this._AppliedTime = value;
					this.SendPropertyChanged("AppliedTime");
					this.OnAppliedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stage", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Stage
		{
			get
			{
				return this._Stage;
			}
			set
			{
				if ((this._Stage != value))
				{
					this.OnStageChanging(value);
					this.SendPropertyChanging();
					this._Stage = value;
					this.SendPropertyChanged("Stage");
					this.OnStageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserAppliedJob", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserAppliedJobs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserAppliedJobs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _Login;
		
		private System.Nullable<short> _UserType;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private string _Password;
		
		private string _Email;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _Zip;
		
		private System.Nullable<bool> _WillingToRelocate;
		
		private EntitySet<UserSkill> _UserSkills;
		
		private EntitySet<RecruiterPinnedUser> _RecruiterPinnedUsers;
		
		private EntitySet<RecruiterPinnedUser> _RecruiterPinnedUsers1;
		
		private EntitySet<RecruiterBoard> _RecruiterBoards;
		
		private EntitySet<UserAppliedJob> _UserAppliedJobs;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<JobBoardRow> _JobBoardRows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnUserTypeChanging(System.Nullable<short> value);
    partial void OnUserTypeChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnWillingToRelocateChanging(System.Nullable<bool> value);
    partial void OnWillingToRelocateChanged();
    #endregion
		
		public User()
		{
			this._UserSkills = new EntitySet<UserSkill>(new Action<UserSkill>(this.attach_UserSkills), new Action<UserSkill>(this.detach_UserSkills));
			this._RecruiterPinnedUsers = new EntitySet<RecruiterPinnedUser>(new Action<RecruiterPinnedUser>(this.attach_RecruiterPinnedUsers), new Action<RecruiterPinnedUser>(this.detach_RecruiterPinnedUsers));
			this._RecruiterPinnedUsers1 = new EntitySet<RecruiterPinnedUser>(new Action<RecruiterPinnedUser>(this.attach_RecruiterPinnedUsers1), new Action<RecruiterPinnedUser>(this.detach_RecruiterPinnedUsers1));
			this._RecruiterBoards = new EntitySet<RecruiterBoard>(new Action<RecruiterBoard>(this.attach_RecruiterBoards), new Action<RecruiterBoard>(this.detach_RecruiterBoards));
			this._UserAppliedJobs = new EntitySet<UserAppliedJob>(new Action<UserAppliedJob>(this.attach_UserAppliedJobs), new Action<UserAppliedJob>(this.detach_UserAppliedJobs));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._JobBoardRows = new EntitySet<JobBoardRow>(new Action<JobBoardRow>(this.attach_JobBoardRows), new Action<JobBoardRow>(this.detach_JobBoardRows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="SmallInt")]
		public System.Nullable<short> UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="NChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WillingToRelocate", DbType="Bit")]
		public System.Nullable<bool> WillingToRelocate
		{
			get
			{
				return this._WillingToRelocate;
			}
			set
			{
				if ((this._WillingToRelocate != value))
				{
					this.OnWillingToRelocateChanging(value);
					this.SendPropertyChanging();
					this._WillingToRelocate = value;
					this.SendPropertyChanged("WillingToRelocate");
					this.OnWillingToRelocateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSkill", Storage="_UserSkills", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserSkill> UserSkills
		{
			get
			{
				return this._UserSkills;
			}
			set
			{
				this._UserSkills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecruiterPinnedUser", Storage="_RecruiterPinnedUsers", ThisKey="UserID", OtherKey="RecruiterID")]
		public EntitySet<RecruiterPinnedUser> RecruiterPinnedUsers
		{
			get
			{
				return this._RecruiterPinnedUsers;
			}
			set
			{
				this._RecruiterPinnedUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecruiterPinnedUser1", Storage="_RecruiterPinnedUsers1", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<RecruiterPinnedUser> RecruiterPinnedUsers1
		{
			get
			{
				return this._RecruiterPinnedUsers1;
			}
			set
			{
				this._RecruiterPinnedUsers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecruiterBoard", Storage="_RecruiterBoards", ThisKey="UserID", OtherKey="OwnerID")]
		public EntitySet<RecruiterBoard> RecruiterBoards
		{
			get
			{
				return this._RecruiterBoards;
			}
			set
			{
				this._RecruiterBoards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserAppliedJob", Storage="_UserAppliedJobs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserAppliedJob> UserAppliedJobs
		{
			get
			{
				return this._UserAppliedJobs;
			}
			set
			{
				this._UserAppliedJobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Job", Storage="_Jobs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobBoardRow", Storage="_JobBoardRows", ThisKey="UserID", OtherKey="ClientID")]
		public EntitySet<JobBoardRow> JobBoardRows
		{
			get
			{
				return this._JobBoardRows;
			}
			set
			{
				this._JobBoardRows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSkills(UserSkill entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSkills(UserSkill entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecruiterPinnedUsers(RecruiterPinnedUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecruiterPinnedUsers(RecruiterPinnedUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecruiterPinnedUsers1(RecruiterPinnedUser entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_RecruiterPinnedUsers1(RecruiterPinnedUser entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_RecruiterBoards(RecruiterBoard entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecruiterBoards(RecruiterBoard entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserAppliedJobs(UserAppliedJob entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserAppliedJobs(UserAppliedJob entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_JobBoardRows(JobBoardRow entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_JobBoardRows(JobBoardRow entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobID;
		
		private string _Title;
		
		private string _Employer;
		
		private string _Description;
		
		private System.Guid _UserID;
		
		private System.Nullable<short> _Status;
		
		private System.DateTime _PostDate;
		
		private System.Nullable<short> _Type;
		
		private System.Nullable<short> _Category;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private System.Nullable<System.Guid> _ClientID;
		
		private EntitySet<JobSkill> _JobSkills;
		
		private EntitySet<RecruiterPinnedUser> _RecruiterPinnedUsers;
		
		private EntitySet<JobBoardRow> _JobBoardRows;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEmployerChanging(string value);
    partial void OnEmployerChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnStatusChanging(System.Nullable<short> value);
    partial void OnStatusChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnTypeChanging(System.Nullable<short> value);
    partial void OnTypeChanged();
    partial void OnCategoryChanging(System.Nullable<short> value);
    partial void OnCategoryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnClientIDChanging(System.Nullable<System.Guid> value);
    partial void OnClientIDChanged();
    #endregion
		
		public Job()
		{
			this._JobSkills = new EntitySet<JobSkill>(new Action<JobSkill>(this.attach_JobSkills), new Action<JobSkill>(this.detach_JobSkills));
			this._RecruiterPinnedUsers = new EntitySet<RecruiterPinnedUser>(new Action<RecruiterPinnedUser>(this.attach_RecruiterPinnedUsers), new Action<RecruiterPinnedUser>(this.detach_RecruiterPinnedUsers));
			this._JobBoardRows = new EntitySet<JobBoardRow>(new Action<JobBoardRow>(this.attach_JobBoardRows), new Action<JobBoardRow>(this.detach_JobBoardRows));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employer", DbType="VarChar(100)")]
		public string Employer
		{
			get
			{
				return this._Employer;
			}
			set
			{
				if ((this._Employer != value))
				{
					this.OnEmployerChanging(value);
					this.SendPropertyChanging();
					this._Employer = value;
					this.SendPropertyChanged("Employer");
					this.OnEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt")]
		public System.Nullable<short> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt")]
		public System.Nullable<short> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="SmallInt")]
		public System.Nullable<short> Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobSkill", Storage="_JobSkills", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobSkill> JobSkills
		{
			get
			{
				return this._JobSkills;
			}
			set
			{
				this._JobSkills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_RecruiterPinnedUser", Storage="_RecruiterPinnedUsers", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<RecruiterPinnedUser> RecruiterPinnedUsers
		{
			get
			{
				return this._RecruiterPinnedUsers;
			}
			set
			{
				this._RecruiterPinnedUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobBoardRow", Storage="_JobBoardRows", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobBoardRow> JobBoardRows
		{
			get
			{
				return this._JobBoardRows;
			}
			set
			{
				this._JobBoardRows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Job", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobSkills(JobSkill entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobSkills(JobSkill entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_RecruiterPinnedUsers(RecruiterPinnedUser entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_RecruiterPinnedUsers(RecruiterPinnedUser entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobBoardRows(JobBoardRow entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobBoardRows(JobBoardRow entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoardContents")]
	public partial class BoardContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColumnIndex;
		
		private string _Value;
		
		private System.Guid _CellID;
		
		private System.Guid _RowID;
		
		private EntityRef<JobBoardRow> _JobBoardRow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColumnIndexChanging(int value);
    partial void OnColumnIndexChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCellIDChanging(System.Guid value);
    partial void OnCellIDChanged();
    partial void OnRowIDChanging(System.Guid value);
    partial void OnRowIDChanged();
    #endregion
		
		public BoardContent()
		{
			this._JobBoardRow = default(EntityRef<JobBoardRow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnIndex", DbType="Int NOT NULL")]
		public int ColumnIndex
		{
			get
			{
				return this._ColumnIndex;
			}
			set
			{
				if ((this._ColumnIndex != value))
				{
					this.OnColumnIndexChanging(value);
					this.SendPropertyChanging();
					this._ColumnIndex = value;
					this.SendPropertyChanged("ColumnIndex");
					this.OnColumnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CellID
		{
			get
			{
				return this._CellID;
			}
			set
			{
				if ((this._CellID != value))
				{
					this.OnCellIDChanging(value);
					this.SendPropertyChanging();
					this._CellID = value;
					this.SendPropertyChanged("CellID");
					this.OnCellIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					if (this._JobBoardRow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobBoardRow_BoardContent", Storage="_JobBoardRow", ThisKey="RowID", OtherKey="RowID", IsForeignKey=true)]
		public JobBoardRow JobBoardRow
		{
			get
			{
				return this._JobBoardRow.Entity;
			}
			set
			{
				JobBoardRow previousValue = this._JobBoardRow.Entity;
				if (((previousValue != value) 
							|| (this._JobBoardRow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobBoardRow.Entity = null;
						previousValue.BoardContents.Remove(this);
					}
					this._JobBoardRow.Entity = value;
					if ((value != null))
					{
						value.BoardContents.Add(this);
						this._RowID = value.RowID;
					}
					else
					{
						this._RowID = default(System.Guid);
					}
					this.SendPropertyChanged("JobBoardRow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobBoardRows")]
	public partial class JobBoardRow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RowID;
		
		private System.Guid _ClientID;
		
		private System.Guid _JobID;
		
		private int _RowIndex;
		
		private System.Guid _BoardID;
		
		private EntitySet<BoardContent> _BoardContents;
		
		private EntityRef<User> _User;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<RecruiterBoard> _RecruiterBoard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(System.Guid value);
    partial void OnRowIDChanged();
    partial void OnClientIDChanging(System.Guid value);
    partial void OnClientIDChanged();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnRowIndexChanging(int value);
    partial void OnRowIndexChanged();
    partial void OnBoardIDChanging(System.Guid value);
    partial void OnBoardIDChanged();
    #endregion
		
		public JobBoardRow()
		{
			this._BoardContents = new EntitySet<BoardContent>(new Action<BoardContent>(this.attach_BoardContents), new Action<BoardContent>(this.detach_BoardContents));
			this._User = default(EntityRef<User>);
			this._Job = default(EntityRef<Job>);
			this._RecruiterBoard = default(EntityRef<RecruiterBoard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowIndex", DbType="Int NOT NULL")]
		public int RowIndex
		{
			get
			{
				return this._RowIndex;
			}
			set
			{
				if ((this._RowIndex != value))
				{
					this.OnRowIndexChanging(value);
					this.SendPropertyChanging();
					this._RowIndex = value;
					this.SendPropertyChanged("RowIndex");
					this.OnRowIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BoardID
		{
			get
			{
				return this._BoardID;
			}
			set
			{
				if ((this._BoardID != value))
				{
					if (this._RecruiterBoard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIDChanging(value);
					this.SendPropertyChanging();
					this._BoardID = value;
					this.SendPropertyChanged("BoardID");
					this.OnBoardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobBoardRow_BoardContent", Storage="_BoardContents", ThisKey="RowID", OtherKey="RowID")]
		public EntitySet<BoardContent> BoardContents
		{
			get
			{
				return this._BoardContents;
			}
			set
			{
				this._BoardContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobBoardRow", Storage="_User", ThisKey="ClientID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.JobBoardRows.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.JobBoardRows.Add(this);
						this._ClientID = value.UserID;
					}
					else
					{
						this._ClientID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobBoardRow", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobBoardRows.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobBoardRows.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecruiterBoard_JobBoardRow", Storage="_RecruiterBoard", ThisKey="BoardID", OtherKey="BoardID", IsForeignKey=true)]
		public RecruiterBoard RecruiterBoard
		{
			get
			{
				return this._RecruiterBoard.Entity;
			}
			set
			{
				RecruiterBoard previousValue = this._RecruiterBoard.Entity;
				if (((previousValue != value) 
							|| (this._RecruiterBoard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecruiterBoard.Entity = null;
						previousValue.JobBoardRows.Remove(this);
					}
					this._RecruiterBoard.Entity = value;
					if ((value != null))
					{
						value.JobBoardRows.Add(this);
						this._BoardID = value.BoardID;
					}
					else
					{
						this._BoardID = default(System.Guid);
					}
					this.SendPropertyChanged("RecruiterBoard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BoardContents(BoardContent entity)
		{
			this.SendPropertyChanging();
			entity.JobBoardRow = this;
		}
		
		private void detach_BoardContents(BoardContent entity)
		{
			this.SendPropertyChanging();
			entity.JobBoardRow = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoardColumns")]
	public partial class BoardColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _BoardID;
		
		private int _ColumnIndex;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnBoardIDChanging(System.Guid value);
    partial void OnBoardIDChanged();
    partial void OnColumnIndexChanging(int value);
    partial void OnColumnIndexChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BoardColumn()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BoardID
		{
			get
			{
				return this._BoardID;
			}
			set
			{
				if ((this._BoardID != value))
				{
					this.OnBoardIDChanging(value);
					this.SendPropertyChanging();
					this._BoardID = value;
					this.SendPropertyChanged("BoardID");
					this.OnBoardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnIndex", DbType="Int NOT NULL")]
		public int ColumnIndex
		{
			get
			{
				return this._ColumnIndex;
			}
			set
			{
				if ((this._ColumnIndex != value))
				{
					this.OnColumnIndexChanging(value);
					this.SendPropertyChanging();
					this._ColumnIndex = value;
					this.SendPropertyChanged("ColumnIndex");
					this.OnColumnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
